/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(comp)
package co.edu.uniquindio.compiladores;

public class comp
{
       
  public static void main(String args []) throws ParseException
  {

	try
	{
	  System.out.println("Ingrese el código a analizar:");
	  comp analizador = new comp(System.in);
	  analizador.Programa();
	  System.out.println("Se ha compilado con éxito");
	}
	catch(ParseException e)
	{
	  System.err.println("Se han encontrado errores");
	  System.err.println(e.getMessage());
	  
	}

  }
}

PARSER_END(comp)


SKIP:   /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
  <LPAREN: "(">
| <RPAREN: ")">
| <ADD_OP: "+" | "-">
| <MULT_OP: "*" | "/">
| <INT: "int">
| <BOOL: "bool">
| <NUMBER: (["0"-"9"])+>
| <ID: (["a"-"z","A"-"Z"])+>
| <SEMIC: ";">
| <FINARCH: "?">
}



void Programa():
{}
{
	Sentencias() <FINARCH>
	
}

void Sentencias(): {}
{
  (SimpleStm() <SEMIC> [Sentencias()] )
}

void SimpleStm(): {}
{
  expresion() | declaracion()
}

void declaracion(): {}
{
  <INT> <ID> | <BOOL> <ID>
}


void expresion(): {}
{
  term() (<ADD_OP> term())*
}

void term() : {}
{
  factor()(<MULT_OP> factor())*
}

void factor() : {}
{
  <LPAREN> expresion() <RPAREN>
  | <NUMBER>
  | <ID>
  
}
