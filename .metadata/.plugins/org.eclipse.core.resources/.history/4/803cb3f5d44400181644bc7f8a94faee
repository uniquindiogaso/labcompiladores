options
{
  STATIC = false;
}

PARSER_BEGIN(Calculadora)

public class Calculadora
{
  public static void main(String args []) throws ParseException
  {
    try
    {
      System.out.println("Ingrese el c\u00f3digo a analizar:");
      Calculadora calc = new Calculadora(System.in);
      calc.calculate();
      System.out.println("Se ha compilado con \u00e9xito");
     
    }
    catch (ParseException e)
    {
      System.err.println("Se han encontrado errores");
      System.err.println(e.getMessage());
    }
  }
}

PARSER_END(Calculadora)

/*Sección de Tokens*/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < ADD : ("+") >
| < SUB : ("-") >
| < MUL : ("*") >
| < DIV : ("/") >
| < LBR : ("(") >
| < RBR : (")") >
| < SEP : (";") >
| < INT : ([ "0"-"9" ])+ >
| < STRING : "string" >
| < INTEGER : "int" >
| < IGUALACION : "=" >
| < CADENA :"\""(~["\""])*"\"" >
| < IDENTIFICADOR : ([ "a"-"z" ])+ >
| < FIN : "?" >
}

/*Sección Gramatica y Semantica
<calculate> ::= <expr>
<expr>::= <term> "+" <expr> | <term> - <expr> | <term>
<term>::= <factor> "*" <term> | <factor> "/" <term> | <factor>
<factor> ::= <numero> | "(" < expr> ")"
*/

 
void calculate() :
{
  
}
{
  declaracion() | asignacion() | sentencia()

}

void declaracion():
{}
{
  tipoDato() < IDENTIFICADOR > <SEP >
}

void asignacion():
{}
{
  < IDENTIFICADOR ><IGUALACION > tipoAsignacion() <SEP>
}

void tipoAsignacion():
{}
{
  expr()|<CADENA >| < IDENTIFICADOR >
}

void tipoDato():
{}
{
  < STRING >|< INTEGER >
}
  

void sentencia(): {int result; }
{
  result = expr(){ System.out.println("El resultado es:"+ result); } < SEP > [ sentencia()]
} 
int expr() :
{
  int a;
  int b;
  int result = 0;
}
{
  (
    /*
a = term(){ result+=a; } <ADD> b = expr(){ result+=b; }
| a = term(){ result+=a; } <SUB> b = expr(){ result-=b; }
| a = term(){ result+=a; }*/
    a = term()
    {
      result += a;
    }
    (
      < ADD > b = term()
      {
        result += b;
      }
    | < SUB > b = term()
      {
        result -= b;
      }
    )*
  )
  {
    return result;
  }
}

int term() :
{
  int a;
  int b;
  int result = 0;
}
{
  a = factor()
  {
    result = a;
  }
  (
    < MUL > b = factor()
    {
      result *= b;
    }
  | < DIV > b = factor()
    {
      result /= b;
    }
  )*
  {
    return result;
  }
}

int factor() :
{
  Token t;
  int result;
}
{
  t = < INT >
  {
    return Integer.parseInt(t.image);
  }
| < LBR > result = expr() < RBR >
  {
    return result;
  }
}
