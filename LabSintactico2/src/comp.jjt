/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(comp)

public class comp
{
       
  public static void main(String args []) throws ParseException
  {

	try
	{
	  System.out.println("Ingrese el código a analizar:");
	  comp analizador = new comp(System.in);
	  SimpleNode sNode = analizador.Programa();
	  sNode.dump("");
	  
	  System.out.println("Se ha compilado con éxito");
	}
	catch(ParseException e )
	{
	  System.err.println("Se han encontrado errores");
	  System.err.println(e.getMessage());
	  
	}

  }
}

PARSER_END(comp)


SKIP:   /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
  <LPAREN: "(">
| <RPAREN: ")">
| <ADD_OP: "+" | "-">
| <MULT_OP: "*" | "/">
| <INT: "int"> 
| <BOOL: "bool">
| <NUMBER: (["0"-"9"])+>
| <ID: (["a"-"z","A"-"Z"])+> 
| <SEMIC: ";">
| <FINARCH: "?">
}



SimpleNode Programa():
{}
{
	Sentencias() <FINARCH>
	{ return jjtThis; } 
}

void Sentencias(): {Token t;}
{
  (SimpleStm() t = <SEMIC>{jjtThis.value = t.image;} #PUNTOYCOMA(true) [Sentencias()] )
}

void SimpleStm(): {}
{
  expresion() | declaracion()
}

void declaracion(): { Token t; }
{
  t= <INT> {jjtThis.value = t.image;} #ENTERO(true) t = <ID> {jjtThis.value = t.image;} #IDENT(true)  | t = <BOOL>{jjtThis.value = t.image;} #BOOLEANO(true)t = <ID> {jjtThis.value = t.image;} #IDENT(true)  
}

void expresion(): {Token t;}
{
  term() (t = <ADD_OP>{jjtThis.value = t.image;} #OPERADD(true) term())*
}

void term() : {Token t;}
{
  factor()(t = <MULT_OP>{jjtThis.value = t.image;} #OPERMULT(true) factor())*
}

void factor() : {Token t;}
{
  t = <LPAREN>{jjtThis.value = t.image;} #ABRIRP(true) expresion() t = <RPAREN>{jjtThis.value = t.image;} #CERRARP(true)
  | t = <NUMBER>{jjtThis.value = t.image;} #NUMERO(true)
  | t = <ID> {jjtThis.value = t.image;} #IDENT(true)
  
}
